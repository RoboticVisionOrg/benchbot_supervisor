#!/usr/bin/env python
from flask import Flask, jsonify, request
import gevent
import rospy
import cv2
import base64
import json
import time
import math
import signal
from gevent.pywsgi import WSGIServer
from gevent.event import Event

from geometry_msgs.msg import Twist, Vector3, PoseWithCovarianceStamped
from benchbot_teleop.srv import Command
from pepper_navigation.srv import LocationPose
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

app = Flask(__name__)
rospy.init_node('benchbot_web_server')

bridge = CvBridge()

def dispatch(velocity):
    rospy.wait_for_service('/command')
    try:
        send_command = rospy.ServiceProxy('/command', Command)
        resp = send_command(velocity)

        if (resp.result == 0):
            return {'result': 0}
        else:
            return {'result': resp.result, 'error': resp.message}

    except rospy.ServiceException, e:
        print "Service call failed: %s"%e

def at_goal():
    rospy.wait_for_service('/navigation/get_location_pose')
    try:
        pose = rospy.wait_for_message('/amcl_pose', PoseWithCovarianceStamped, timeout=5)
    
        position = (
            pose.pose.pose.position.x,
            pose.pose.pose.position.y,
            pose.pose.pose.position.z
        )
        
        get_location = rospy.ServiceProxy('/navigation/get_location_pose', LocationPose)
        pose = get_location('goal')
        
        goal_position = (
            pose.pose.position.x,
            pose.pose.position.y,
            pose.pose.position.z
        )
        distance = math.sqrt((position[0] - goal_position[0]) ** 2 + (position[1] - goal_position[1])  ** 2)
        return distance < 0.3

    except rospy.ROSException:
        print "wait_for_message call failed: %s"%e
        return False
    except rospy.ServiceException:
        print "Service call failed: %s"%e
        return False
    
    return False

def foward():
    return dispatch(Twist(linear=Vector3(0.5,0,0)))    

def backward():
    return dispatch(Twist(linear=Vector3(-0.5,0,0)))

def left():
    return dispatch(Twist(angular=Vector3(0,0,1.0)))

def right():
    return dispatch(Twist(angular=Vector3(0,0,-1.0)))

actions = {
	'forward': lambda: foward(),
    'left': lambda: left(),
    'right': lambda: right()
}

@app.route('/')
def main():
    return jsonify({'GET': ['image', 'command'], 'POST': ['command']})

@app.route('/image', methods=['GET'])
def getImage():
    data = rospy.wait_for_message('/camera/image_raw', Image)
    img = bridge.imgmsg_to_cv2(data, "bgr8")

    _, buf = cv2.imencode('.jpg', img)
    encoded = base64.b64encode(buf)

    return jsonify({'image': encoded})

@app.route('/is_done', methods=['GET'])
def isDone():
    return jsonify({'result': at_goal()})

@app.route('/command', methods=['GET', 'POST'])
def command():
    if request.method == 'GET':
        return jsonify(actions.keys())
    
    content = request.get_json(silent=True)

    if not content or 'action' not in content:
        return jsonify({'result': 1, 'error': 'Missing command data'})
	
    action_id = content['action']

    if not action_id in actions:
        return jsonify({'result': 1, 'error': 'Unknown command: ' + action_id})

    return jsonify(actions[action_id]())


http_server = WSGIServer(('172.17.0.1', 8081), app)
http_server.start()

evt = Event()

gevent.signal(signal.SIGQUIT, evt.set)
gevent.signal(signal.SIGTERM, evt.set)
gevent.signal(signal.SIGINT, evt.set)
evt.wait()
print("Shutting down server")

http_server.stop()
